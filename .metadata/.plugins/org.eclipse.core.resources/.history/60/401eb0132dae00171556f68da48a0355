package com.xjtu.algorithm;

public class Test {
	
	/**
	 * 仿真实现一下边界跟踪算法的效果
	 * @param data
	 */
	public static void borderFollowing(int [][]data) {
		int i1=0,j1=0;
		int i2=0,j2=0;
		int i3=0,j3=0;
		int i4=0,j4=0;
		int NBD=1;
		for(int row=0; row<data.length; row++) {
L1:			for(int col=0; col<data[0].length; col++) {
				//算法开始条件
				if(data[row][col]!=0) {
					//进入步骤1
					if(data[row][col]==1 && data[row][col-1]==0) {	//外边界开始点
						NBD++;
						i2=row;
						j2=col-1;
					}else if(data[row][col]>=1 && data[row][col+1]==0) { //孔边界开始点
						NBD++;
						i2=row;
						j2=col+1;
					}else {  //步骤4
						continue L1;
					}
					//步骤3
					//寻找第一个非零像素值
					//外边界类型，也就是遍历开始点在左侧
					if(j2==col-1) {
						if(data[i2][j2]!=0) {//第一个点
							i1=i2;
							j1=j2;
						}else if(data[i2-1][j2]!=0) {//左上角
							i1=i2-1;
							j1=j2;
						}else if(data[i2-1][j2+1]!=0) {//上中
							i1=i2-1;
							j2=j2+1;
						}else if(data[i2-1][j2+2]!=0) { //上右
							i1=i2-1;
							j1=j2+2;							
						}else if(data[i2][j2+2]!=0) {//右中
							i1=i2;
							j1=j2+2;
						}else if(data[i2+1][j2+2]!=0) { //右下
							i1=i2+1;
							j1=j2+1;
						}else if(data[i2+1][j2+1]!=0) { //下中
							i1=i2+1;
							j1=j2+1;
						}else if(data[i2+1][j2]!=0) { //下左
							j1=i2+1;
							j1=j2;
						}else { //如果没有找到非零值，进入步骤4
							data[row][col]=-NBD;
							continue L1;
						}
						//孔边界类型，开始点在右边
					}else if(j2==col+1) {
						if(data[i2][j2]!=0) { //右中
							i1=i2;
							j1=j2;
						}else if(data[i2+1][j2]!=0) { //右下
							i1=i2+1;
							j1=j2;
						}else if(data[i2+1][j2-1]!=0) { //下中
							i1=i2+1;
							j1=j2-1;
						}else if(data[i2+1][j2-2]!=0) { //下左
							i1=i2+1;
							j1=j2-2;
						}else if(data[i2][j2-2]!=0) { //左中
							i1=i2;
							j1=j2-2;
						}else if(data[i2-1][j2-2]!=0) { //左上
							i1=i2-1;
							j1=j2-2;							
						}else if(data[i2-1][j2-1]!=0) { //上中
							i1=i2-1;
							j1=j2-1;
						}else if(data[i2-1][j2]!=0) {//上右
							i1=i2-1;
							j1=j2;
						}else {
							data[row][col]=-NBD;
							continue L1;
						}
					}
					//步骤3.2
					i2=i1;
					j2=j1;
					i3=row;
					j3=col;
					boolean flag=true;
					//3.3 ，从i2，j2下个像素点开始，逆时针寻找非零元素
					//分4种情况实现，上下左右
					if(i2==i3-1 && j2!=j3-1) { //如果在上
						j2-=1; //从下一个元素开始
						//up
						while(j2!=j3-2) {
							if(data[i2][j2]!=0) { //如果找到了非零点
								i4=i2;
								j4=j2;
								flag=false;
								break;
							}
							j2--;
						}
						//left
						while(flag && i2!=i3+2) {
							
						}
						
					}else if(j2==j3-1 && i2!=i3-2) { //如果在左侧
						i2-=1;	//从当前位置下个元素开始
						while(i2!=i3+2) {
							if(data[i2][j2]!=0) {
								i4=i2;
								j4=j2;
								break;
							}
							i2++;
						}
					}else if(i2==i3-1 && j2!=j3+2) { //如果在下侧
						j2+=1;
						while(j2!=j3+2) {
							if(data[i2][j2]!=0) {
								i4=i2;
								j4=j2;
								break;
							}
							j2++;
						}
					}else if(j2==j3+1 && i2!=i3-2){ //如果在右侧
						j2-=1;
						while(j2!=j3-2) {
							if(data[i2][j2]!=0) {
								i4=i2;
								j4=j2;
								break;
							}
							j2--;
						}
					}
					
				}				
			}
			
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int [][]data=new int[8][8];
		
	}

}
