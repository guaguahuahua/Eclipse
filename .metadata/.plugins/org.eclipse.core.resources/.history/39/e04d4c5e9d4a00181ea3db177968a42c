package com.xjtu.algorithm;

public class ContinueLeftMove {

	/**
	 * 按照理解，最大的移位长度就是字符串本身了，超过字符串长度的移位通过
	 * 取余的形式可以得到，我们可以现将两个字符串拼接到一起t，然后直接在t中裁剪源字符串长度的一个串
	 * @param str
	 * @param n
	 * @return
	 */
	public static String continueLeftMove(String str, int n) {
		int len=n%str.length();
		//将两个字符串拼接在一起
		String t=str+str;
		String cut=t.substring(len, len+str.length());
		return cut;
	}
	
	/**
	 * 循环左移
	 * @param str
	 * @param n
	 * @return
	 */
	public static String continueLeftMove_1(String str, int n) {
		
		//获得最终移位的个数
		n=n%str.length();
		
		return null;
	}
	
	/**
	 * 将给定的字符串进行逆转
	 * @param s
	 * @return
	 */
	public static String reverse(String  s) {
		String t="";
		for(int i=0; i<s.length(); i++) {
			t=s.charAt(i)+t;
		}
		return null;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		String s="abcXYZdef";
		int n=3;
		String res=continueLeftMove(s, n);
		System.out.println(res);
	}

}
