package com.xjtu.algorithm;

public class Test {
	
	/**
	 * 仿真实现一下边界跟踪算法的效果
	 * @param data
	 */
	public static void borderFollowing(int [][]data) {
		int i1=0,j1=0;
		int i2=0,j2=0;
		int i3=0,j3=0;
		int i4=0,j4=0;
		int NBD=1;
		for(int row=0; row<data.length; row++) {
L1:			for(int col=0; col<data[0].length; col++) {
				//算法开始条件
				if(data[row][col]!=0) {
					//进入步骤1
					if(data[row][col]==1 && data[row][col-1]==0) {	//外边界开始点
						NBD++;
						i2=row;
						j2=col-1;
					}else if(data[row][col]>=1 && data[row][col+1]==0) { //孔边界开始点
						NBD++;
						i2=row;
						j2=col+1;
					}else {  //步骤4
						continue L1;
					}
					//步骤3
					//寻找第一个非零像素值
					//外边界类型，也就是遍历开始点在左侧
					if(j2==col-1) {
						if(data[i2][j2]!=0) {//第一个点
							i1=i2;
							j1=j2;
						}else if(data[i2-1][j2]!=0) {//左上角
							i1=i2-1;
							j1=j2;
						}else if(data[i2-1][j2+1]!=0) {//上中
							i1=i2-1;
							j2=j2+1;
						}else if(data[i2-1][j2+2]!=0) { //上右
							i1=i2-1;
							j2=j2+2;							
						}else if(data[i2][j2+2]!=0) {//右中
							i1=i2;
							j2=j2+2;
						}else if(data[i2+1][j2+2]!=0) { //右下
							i1=i2+1;
							j2=j2+1;
						}

					}
										
				}				
			}
			
		}
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int [][]data=new int[8][8];
		
	}

}
