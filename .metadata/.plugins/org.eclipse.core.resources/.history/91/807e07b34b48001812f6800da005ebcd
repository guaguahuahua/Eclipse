package com.xjtu.algorithm;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/**
 * 给定整型数组，将数组中的元素组合为一个整数，该整数为所有组合中的最小值
 * @author Administrator
 *
 */
public class SmallestNumOfArray {

	public static int smallestNumOfArray(int []nums) {
		//获得数组中元素组合的全排列
		List<String> list=new ArrayList<String>();
		boolean []flag=new boolean[nums.length];
		backtrack(nums, new ArrayList(), list, flag);
		System.out.println(list);
		//这块不能使用排序算法，因为得到排列的字符串可能是长度超出整数的表示范围
		for(int i=1; i<list.size(); i++) {
			String s1=list.get(i-1);
			String s2=list.get(i);
			int res=compareString(s1, s2);
			
		}
		
		
		return 0;
	}
	
	/**
	 * 递归的方式实现数组中元素的组合过程
	 * @param nums
	 * @param tempList
	 * @param list
	 * @param flag
	 */
	public static void backtrack(int []nums, List<Integer>tempList, List<String> list, boolean []flag) {
		if(tempList.size()==nums.length) {
			//将排列转化为一个字符串，
			StringBuilder sb=new StringBuilder();
			for(int i=0; i<tempList.size(); i++) {
				sb.append(tempList.get(i));
			}
			list.add(sb.toString());
		}else {
			for(int i=0; i<nums.length; i++) {
				if(flag[i]==false) {
					tempList.add(nums[i]);
					flag[i]=true;
					backtrack(nums, tempList, list, flag);
					flag[i]=false;
					tempList.remove(tempList.size()-1);
				}
			}
		}
	}
	
	
	/**
	 * 比较两个字符串，按照字符比对，如果左边的字典序小于右边，返回+1，相同返回0，大于右边返回-1
	 * @param s1
	 * @param s2
	 * @return
	 */
	public static int compareString(String s1, String s2) {
		int len=s1.length();
		char c1;
		char c2;
		for(int i=0; i<len; i++) {
			c1=s1.charAt(i);
			c2=s2.charAt(i);
			if(c1<c2) {
				return 1;
			}else if(c1>c2) {
				return -1;
			}else {
				continue;
			}
		}
		//两个字符串相等
		return 0;
	}
	
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int []nums= {3, 32, 321};
		smallestNumOfArray(nums);
	}

}
