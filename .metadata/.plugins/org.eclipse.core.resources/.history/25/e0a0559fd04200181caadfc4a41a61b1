package com.xjtu.algorithm;

import com.xjtu.tree.Node;

/**
 * 复杂链表的复制，复杂链表有两个指针域，
 * 一个用于存储常规指针，一个用于存储指向任意节点的指针
 * @author Administrator
 *
 */
public class CopyTheLinkedList {

	/**
	 * 使用二叉树的结构作为复杂链表的单个节点结构
	 * 我们认为left指向的是正常的序列，而right指向的是一个任意的节点
	 * 我们首先复制left的指向的序列，再复制right指向的序列
	 * @param head
	 */
	public static void copyTheLinkedList(Node head) {
		
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		Node head=new Node('a');
		Node n1=new Node('b');
		Node n1=new Node('b');
		Node n1=new Node('b');
		Node n1=new Node('b');
	}

}
