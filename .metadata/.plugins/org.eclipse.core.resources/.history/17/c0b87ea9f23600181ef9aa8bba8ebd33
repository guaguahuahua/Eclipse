package com.xjtu.algorithm;

public class DjkstraProblem {

	//如果不存在路径，那么两个顶点之间的距离为最大值
	public static final int inf=Integer.MAX_VALUE;
	
	
	/**
	 * 给定边集合求从第一个顶点到其他顶点的最短距离
	 * @param e
	 */
	public static void dijkstraProblem(int [][]e) {
		
		//存放第一个节点到其他节点的距离值
		int []dis=e[0];
		//判断某个顶点是否被访问过
		boolean []book=new boolean[dis.length];
		//第一个顶点已经被访问
		book[0]=true;
		int min=Integer.MAX_VALUE;
		int index=-1;
		for(int i=0; i<dis.length; i++) {
			//寻找第一个距离原点最近的节点
			for(int j=0; j<e[i].length; j++) {
				//如果两个顶点之间存在边，同时没有被访问过，保存最小值，及其索引位置
				if(e[i][j]!=inf && !book[j]) {
					if(min>e[i][j]) {
						min=e[i][j];
						index=j;
					}
				}				
			}
			//从该顶点出发，更新dis
			for(int k=0; k<e[index].length; k++) {
				//判断该节点没有被添加到结果集
				if(!book[k]) {
					if(dis[index]) {
						
					}
					
					
				}
			}
			
		}
		
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		//边集初始化
		int [][]e= {
				{ 0, 1, 12, inf, inf, inf }, 
				{ inf, 0, 9, 3, inf, inf }, 
				{ inf, inf, 0, inf, 5, inf },
				{ inf, inf, 4, 0, 13, 15 }, 
				{ inf, inf, inf, inf, 0, 4 }, 
				{ inf, inf, inf, inf, inf, 0 }
		};
	}

}
