package com.xjtu.algorithm;

import java.util.Arrays;

/**
 * 找到数组中k个最小的元素
 * @author Administrator
 *
 */
public class FindKMinValues {
	
	/**
	 * 直接排序，排序之后取前k个元素
	 * @param nums
	 * @param k
	 * @return
	 */
	public static int[] findKMinValues(int []nums, int k) {
		Arrays.sort(nums);
		int []res=new int[k];
		for(int i=0; i<k; i++) {
			res[i]=nums[i];
		}
		return res;
	}
	
	/**
	 * 使用选择排序的方法，但是只选择排序前k个元素
	 * @param nums
	 * @param k
	 * @return
	 */
	public static int[] findKMinValues_1(int []nums, int k) {
		
		int []res=new int [k];
		for(int i=0; i<k; i++) {
			int min=nums[i];
			int index=-1;
			for(int j=i; j<nums.length; j++) {
				if(nums[j]<min) {
					min=nums[j];
					index=j;
				}
			}
			int temp=nums[i];
			nums[i]=min;
			nums[index]=temp;
			res[i]=nums[i];
		}
		
		return res;
	}
	
	/**
	 * 使用交换排序的方法求前k个元素
	 * @param nums
	 * @param k
	 * @return
	 */
	public static int[] findKMinValues_2(int []nums, int k) {
		
		int[]res=new int[k];
		for(int i=0; i<k; i++) {
			
			//我们将最小的k个元素交换到数组的最末尾去
			for(int j=1; j<nums.length-i; j++) {
				//如果前面的元素小于后面的元素，那么交换
				if(nums[j-1]<nums[j]) {
					int temp=nums[j-1];
					nums[j-1]=nums[j];
					nums[j]=temp;
				}
			}
			res[i]=nums[nums.length-i-1];
		}
		return res;
	}
	
	/**
	 * 使用最小堆的方式获得前k个最小的元素
	 * @param nums
	 * @param k
	 * @return
	 */
	public static int[] findKMinValues_3(int []nums, int k) {
		
		
		
		
		
		return null;
	}
	
	/**
	 * 构建最小堆
	 * @param nums
	 * @parem pos	从该位置向下调整
	 */
	public static void createHeap(int []nums, int pos) {
		
		//temp存放的是根节点
		for(int temp=nums[pos]; 2*pos+1<nums.length; ) {
			//根节点与哪一个子节点交换，那么就将指向该子节点，继续判断子节点是否需要交换
			int index=-1;
			//如果右节点存在
			if(2*pos+2<nums.length) {
				//取两个节点中最小的覆盖根节点
				nums[pos]=nums[2*pos+1]>nums[2*pos+2] ? nums[2*pos+2] : nums[2*pos+1];
				index=nums[2*pos+1]>nums[2*pos+2] ? 2*pos+2 : 2*pos+1;				
			//右节点不存在	
			}else {
				nums[pos]=temp>nums[2*pos+1] ? nums[2*pos+1] : temp;
				
			}
			pos=2*pos+1;			
		}
		
	}
	
	public static void main(String []args) {
		int []nums= {4,5,1,6,2,7,3,8};
		int k=4;
		int []res=findKMinValues_2(nums, k);
		for(int K:res) {
			System.out.print(K+"\t");
		}
	}

}
