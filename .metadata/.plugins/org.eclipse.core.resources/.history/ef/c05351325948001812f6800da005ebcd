package com.xjtu.algorithm;
/**
 * 只包含因子2，3，5数称为丑数，6，8是丑数，而14不是，因为包含了7
 * 一般的认为1是第一个丑数，返回第n个丑数
 * @author Administrator
 *
 */
public class UglyNumber {

	/**
	 * 暴力法，每个数轮流的整除2，3，5，直到商为1，如果2，3，5都无法整除，那么认为不是丑数
	 * @param n
	 * @return
	 */
	public static int uglyNumber(int n) {
	
		//首先认为1是一个丑数
		int res=Integer.MIN_VALUE;
		int start=1;
		n=n-1;
		start=start+1;
		while(n>0) {
			
			int s=start;
			boolean isUgly=false;
			while(s!=1) {
				boolean f1=false;
				boolean f2=false;
				boolean f3=false;
				
				if(s%2==0) {
					f1=true;
					s=s/2;
				}
				if(s%3==0) {
					f2=true;
					s=s/3;
				}
				if(s%5==0) {
					f3=true;
					s=s/5;
				}
				//只要含有一个因子即继续进行
				if(f1==true || f2==true || f3==true) {
					//如果除尽，那么就是丑数
					if(s==1) {
						isUgly=true;
						break;
					//没除尽继续	
					}else {
						continue;
					}
				//如果无法整除任何一个因子，那就不是丑数，退出	
				}else {
					break;
				}
			}
			//如果当前的数是丑数，那么标记该元素，并将寻找个数-1
			if(isUgly==true) {
				res=start;
				n=n-1;
			}
			start++;			
		}
		
		return res;
	}
	
	public static int uglyNumber(int n) {
		return 0;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n=7;
		int res=uglyNumber(n);
		System.out.println(res);
	}

}
