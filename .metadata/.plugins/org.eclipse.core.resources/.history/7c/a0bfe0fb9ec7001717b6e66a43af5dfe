package com.xjtu.svm;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.ml.SVM;

public class ReadInPlate {
	private final static int amount=200; 
	private static int width;
	private static int height;
	/**
	 * 读入有车牌的训练集
	 * @param hasPlate
	 * @param label
	 */
	public static void readInPlateImg(Mat mat, List<Integer>label) {
		String path="E:/HasPlate";
		File file=new File(path);
		//获得该路径下面的所有文件，并存放在文件数组中
		File[] fileArray=file.listFiles();
		if(fileArray.length==0) {
			System.out.println("文件夹为空，没有图像读入！");
		}
		//创建存放图像的list
		for(int i=0; i<amount; i++) {
			//获得文件的绝对路径
			path=fileArray[i].getAbsolutePath();
			System.out.println(path);
			//将该图像以mat 的格式读入
			Mat tmp=Imgcodecs.imread(path);
			//这是为后面合并两个集合做准备
			width=tmp.cols();
			height=tmp.rows();
			//将该图像添加到对应的数组中去
			mat.push_back(tmp);;
			label.add(1);
		}
	}
	
	/**
	 * 读入无车牌的训练集
	 * @param noPlate
	 * @param label
	 */
	public static void readInNoPlateImg(Mat mat, List<Integer>label) {
		String path="E:/NoPlate";
		File file=new File(path);
		File[] fileArray=file.listFiles();
		if(fileArray.length==0) {
			System.out.println("文件夹为空，没有图像读入！");
		}
		//创建存放图像的list
		for(int i=0; i<amount; i++) {
			//获得文件的绝对路径
			path=fileArray[i].getAbsolutePath();
//			System.out.println(path);
			//将该图像以mat 的格式读入
			Mat tmp=Imgcodecs.imread(path);
			//将该图像添加到对应的数组中去
			mat.push_back(mat);
			label.add(0);
		}
	}
	
	/**
	 * 将读入的图像全部写入到一个mat中，每个图像占据Mat的一行
	 * @param mat
	 */
	public static void listToMat(Mat mat, List<Mat> trainningImg) {
		//遍历所有的训练图像，将他们的数据提取出来存放在一个mat中
		for(int i=0; i<trainningImg.size(); i++) {
			//取出一张图像
			Mat tmp=trainningImg.get(i);
			//遍历图像，将所有的像素放置在mat的一行
			for(int row=0; row<tmp.rows(); row++) {
				for(int col=0; col<tmp.cols(); col++) {
					double []t=tmp.get(row, col);
					mat.put(i, row*tmp.cols()+col, new byte[] {(byte)t[0], (byte)t[1], (byte)t[2]});
				}
			}
		}
	}
	
	/**
	 * 将标签数组转化为mat类型
	 * @param mat
	 * @param label
	 */
	public static void labelListToMat(Mat mat, List<Integer> label) {
		for(int i=0; i<label.size(); i++) {
			int v=label.get(i);
			mat.put(i, 0, new byte[] {(byte)v, 0, 0});
		}
	}
	public static void main(String []args) {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
		//加载有车牌和无车牌的图像，并并进行标记
		List<Mat> trainningImg=new ArrayList<Mat>();
		List<Integer> label=new ArrayList<Integer>();
		Mat trainningSet=new Mat();
		readInPlateImg(trainningSet, label);
		readInNoPlateImg(trainningSet, label);
		//将数据集转化为mat类型
		Mat classes=new Mat(); //存放分类标签
		
		classes.push_back(trainningSet);
		
		System.out.println(label.size()+", "+trainningImg.size());
		Mat a=new Mat();
	}
}
