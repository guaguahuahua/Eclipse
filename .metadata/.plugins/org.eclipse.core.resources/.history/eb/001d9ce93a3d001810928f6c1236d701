package com.xjtu.algorithm;

/**
 * 求fabonacci数列的第n项
 * @author Administrator
 *
 */
public class FabonacciProblem {

	/**
	 * 递归的方式， 时间复杂度为fabanacci(n)约为2^0.694n
	 * @param n
	 * @return
	 */
	public static int fabonacci(int n) {
		
		if(n==0) {
			return 0;
		}else if(n==1) {
			return 1;
		}else {
			return fabonacci(n-1)+fabonacci(n-2);	
		}
	}
	
	/**
	 * O(n)时间复杂度
	 * @param n
	 * @return
	 */
	public static int fabonacci_1(int n) {
		
		int f0=0;
		int f1=1;
		if(n==0) {
			return f0;
		}else if(n==1) {
			return f1;
		}
		
		int fn=0;
		for(int i=2; i<=n; i++) {
			fn=f1+f0;
			f0=f1;
			f1=fn;
		}
		return fn;
	}
	
	/**
	 * O(log n)时间复杂度
	 * @param n
	 * @return
	 */
	public static int fabonacci_2(int n) {
		
		int f0=0;
		int f1=1;
		if(n==0) {
			return f0;
		}else if(n==1){
			return f1;
		}
		
		int [][]a= {{1,1},{0,1}};
		int [][]temp=a;
		for(int i=0; i<n-2; i++) {
			int [][]t=new int[2][2];
			t[0][0]=temp[0][0]*a[0][0]+temp[0][1]*a[1][0];
			t[0][1]=temp[0][0]*a[1][0]+temp[0][1]*a[1][1];
			t[1][0]=temp[1][0]*a[0][0]+temp[1][1]*a[1][0];
			t[1][1]=temp[1][0]*a[0][1]+temp[1][1]*a[1][1];
			
			temp=t;
		}
		
		return temp[0][0]*f0+temp[0][1]*f1;
	}
	
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int n=1;
		int res=fabonacci_2(n);
		System.out.println(res);
	}

}
